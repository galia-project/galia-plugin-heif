// Generated by jextract

package is.galia.plugin.heif.ffi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_decoded_mastering_display_colour_volume {
 *     float display_primaries_x[3];
 *     float display_primaries_y[3];
 *     float white_point_x;
 *     float white_point_y;
 *     double max_display_mastering_luminance;
 *     double min_display_mastering_luminance;
 * }
 * }
 */
public class heif_decoded_mastering_display_colour_volume {

    heif_decoded_mastering_display_colour_volume() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, heif_h.C_FLOAT).withName("display_primaries_x"),
        MemoryLayout.sequenceLayout(3, heif_h.C_FLOAT).withName("display_primaries_y"),
        heif_h.C_FLOAT.withName("white_point_x"),
        heif_h.C_FLOAT.withName("white_point_y"),
        heif_h.C_DOUBLE.withName("max_display_mastering_luminance"),
        heif_h.C_DOUBLE.withName("min_display_mastering_luminance")
    ).withName("heif_decoded_mastering_display_colour_volume");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout display_primaries_x$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("display_primaries_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static final SequenceLayout display_primaries_x$layout() {
        return display_primaries_x$LAYOUT;
    }

    private static final long display_primaries_x$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static final long display_primaries_x$offset() {
        return display_primaries_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static MemorySegment display_primaries_x(MemorySegment struct) {
        return struct.asSlice(display_primaries_x$OFFSET, display_primaries_x$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static void display_primaries_x(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, display_primaries_x$OFFSET, display_primaries_x$LAYOUT.byteSize());
    }

    private static long[] display_primaries_x$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static long[] display_primaries_x$dimensions() {
        return display_primaries_x$DIMS;
    }
    private static final VarHandle display_primaries_x$ELEM_HANDLE = display_primaries_x$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static float display_primaries_x(MemorySegment struct, long index0) {
        return (float)display_primaries_x$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float display_primaries_x[3]
     * }
     */
    public static void display_primaries_x(MemorySegment struct, long index0, float fieldValue) {
        display_primaries_x$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout display_primaries_y$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("display_primaries_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static final SequenceLayout display_primaries_y$layout() {
        return display_primaries_y$LAYOUT;
    }

    private static final long display_primaries_y$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static final long display_primaries_y$offset() {
        return display_primaries_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static MemorySegment display_primaries_y(MemorySegment struct) {
        return struct.asSlice(display_primaries_y$OFFSET, display_primaries_y$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static void display_primaries_y(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, display_primaries_y$OFFSET, display_primaries_y$LAYOUT.byteSize());
    }

    private static long[] display_primaries_y$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static long[] display_primaries_y$dimensions() {
        return display_primaries_y$DIMS;
    }
    private static final VarHandle display_primaries_y$ELEM_HANDLE = display_primaries_y$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static float display_primaries_y(MemorySegment struct, long index0) {
        return (float)display_primaries_y$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float display_primaries_y[3]
     * }
     */
    public static void display_primaries_y(MemorySegment struct, long index0, float fieldValue) {
        display_primaries_y$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat white_point_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("white_point_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float white_point_x
     * }
     */
    public static final OfFloat white_point_x$layout() {
        return white_point_x$LAYOUT;
    }

    private static final long white_point_x$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float white_point_x
     * }
     */
    public static final long white_point_x$offset() {
        return white_point_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float white_point_x
     * }
     */
    public static float white_point_x(MemorySegment struct) {
        return struct.get(white_point_x$LAYOUT, white_point_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float white_point_x
     * }
     */
    public static void white_point_x(MemorySegment struct, float fieldValue) {
        struct.set(white_point_x$LAYOUT, white_point_x$OFFSET, fieldValue);
    }

    private static final OfFloat white_point_y$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("white_point_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float white_point_y
     * }
     */
    public static final OfFloat white_point_y$layout() {
        return white_point_y$LAYOUT;
    }

    private static final long white_point_y$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float white_point_y
     * }
     */
    public static final long white_point_y$offset() {
        return white_point_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float white_point_y
     * }
     */
    public static float white_point_y(MemorySegment struct) {
        return struct.get(white_point_y$LAYOUT, white_point_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float white_point_y
     * }
     */
    public static void white_point_y(MemorySegment struct, float fieldValue) {
        struct.set(white_point_y$LAYOUT, white_point_y$OFFSET, fieldValue);
    }

    private static final OfDouble max_display_mastering_luminance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("max_display_mastering_luminance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double max_display_mastering_luminance
     * }
     */
    public static final OfDouble max_display_mastering_luminance$layout() {
        return max_display_mastering_luminance$LAYOUT;
    }

    private static final long max_display_mastering_luminance$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double max_display_mastering_luminance
     * }
     */
    public static final long max_display_mastering_luminance$offset() {
        return max_display_mastering_luminance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double max_display_mastering_luminance
     * }
     */
    public static double max_display_mastering_luminance(MemorySegment struct) {
        return struct.get(max_display_mastering_luminance$LAYOUT, max_display_mastering_luminance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double max_display_mastering_luminance
     * }
     */
    public static void max_display_mastering_luminance(MemorySegment struct, double fieldValue) {
        struct.set(max_display_mastering_luminance$LAYOUT, max_display_mastering_luminance$OFFSET, fieldValue);
    }

    private static final OfDouble min_display_mastering_luminance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("min_display_mastering_luminance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double min_display_mastering_luminance
     * }
     */
    public static final OfDouble min_display_mastering_luminance$layout() {
        return min_display_mastering_luminance$LAYOUT;
    }

    private static final long min_display_mastering_luminance$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double min_display_mastering_luminance
     * }
     */
    public static final long min_display_mastering_luminance$offset() {
        return min_display_mastering_luminance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double min_display_mastering_luminance
     * }
     */
    public static double min_display_mastering_luminance(MemorySegment struct) {
        return struct.get(min_display_mastering_luminance$LAYOUT, min_display_mastering_luminance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double min_display_mastering_luminance
     * }
     */
    public static void min_display_mastering_luminance(MemorySegment struct, double fieldValue) {
        struct.set(min_display_mastering_luminance$LAYOUT, min_display_mastering_luminance$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


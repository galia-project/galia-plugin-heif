// Generated by jextract

package is.galia.plugin.heif.ffi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_camera_intrinsic_matrix {
 *     double focal_length_x;
 *     double focal_length_y;
 *     double principal_point_x;
 *     double principal_point_y;
 *     double skew;
 * }
 * }
 */
public class heif_camera_intrinsic_matrix {

    heif_camera_intrinsic_matrix() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_DOUBLE.withName("focal_length_x"),
        heif_h.C_DOUBLE.withName("focal_length_y"),
        heif_h.C_DOUBLE.withName("principal_point_x"),
        heif_h.C_DOUBLE.withName("principal_point_y"),
        heif_h.C_DOUBLE.withName("skew")
    ).withName("heif_camera_intrinsic_matrix");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble focal_length_x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("focal_length_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double focal_length_x
     * }
     */
    public static final OfDouble focal_length_x$layout() {
        return focal_length_x$LAYOUT;
    }

    private static final long focal_length_x$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double focal_length_x
     * }
     */
    public static final long focal_length_x$offset() {
        return focal_length_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double focal_length_x
     * }
     */
    public static double focal_length_x(MemorySegment struct) {
        return struct.get(focal_length_x$LAYOUT, focal_length_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double focal_length_x
     * }
     */
    public static void focal_length_x(MemorySegment struct, double fieldValue) {
        struct.set(focal_length_x$LAYOUT, focal_length_x$OFFSET, fieldValue);
    }

    private static final OfDouble focal_length_y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("focal_length_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double focal_length_y
     * }
     */
    public static final OfDouble focal_length_y$layout() {
        return focal_length_y$LAYOUT;
    }

    private static final long focal_length_y$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double focal_length_y
     * }
     */
    public static final long focal_length_y$offset() {
        return focal_length_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double focal_length_y
     * }
     */
    public static double focal_length_y(MemorySegment struct) {
        return struct.get(focal_length_y$LAYOUT, focal_length_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double focal_length_y
     * }
     */
    public static void focal_length_y(MemorySegment struct, double fieldValue) {
        struct.set(focal_length_y$LAYOUT, focal_length_y$OFFSET, fieldValue);
    }

    private static final OfDouble principal_point_x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("principal_point_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double principal_point_x
     * }
     */
    public static final OfDouble principal_point_x$layout() {
        return principal_point_x$LAYOUT;
    }

    private static final long principal_point_x$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double principal_point_x
     * }
     */
    public static final long principal_point_x$offset() {
        return principal_point_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double principal_point_x
     * }
     */
    public static double principal_point_x(MemorySegment struct) {
        return struct.get(principal_point_x$LAYOUT, principal_point_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double principal_point_x
     * }
     */
    public static void principal_point_x(MemorySegment struct, double fieldValue) {
        struct.set(principal_point_x$LAYOUT, principal_point_x$OFFSET, fieldValue);
    }

    private static final OfDouble principal_point_y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("principal_point_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double principal_point_y
     * }
     */
    public static final OfDouble principal_point_y$layout() {
        return principal_point_y$LAYOUT;
    }

    private static final long principal_point_y$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double principal_point_y
     * }
     */
    public static final long principal_point_y$offset() {
        return principal_point_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double principal_point_y
     * }
     */
    public static double principal_point_y(MemorySegment struct) {
        return struct.get(principal_point_y$LAYOUT, principal_point_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double principal_point_y
     * }
     */
    public static void principal_point_y(MemorySegment struct, double fieldValue) {
        struct.set(principal_point_y$LAYOUT, principal_point_y$OFFSET, fieldValue);
    }

    private static final OfDouble skew$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("skew"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double skew
     * }
     */
    public static final OfDouble skew$layout() {
        return skew$LAYOUT;
    }

    private static final long skew$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double skew
     * }
     */
    public static final long skew$offset() {
        return skew$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double skew
     * }
     */
    public static double skew(MemorySegment struct) {
        return struct.get(skew$LAYOUT, skew$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double skew
     * }
     */
    public static void skew(MemorySegment struct, double fieldValue) {
        struct.set(skew$LAYOUT, skew$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}


// Generated by jextract

package is.galia.plugin.heif.ffi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct heif_color_conversion_options {
 *     uint8_t version;
 *     enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm;
 *     enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm;
 *     uint8_t only_use_preferred_chroma_algorithm;
 * }
 * }
 */
public class heif_color_conversion_options {

    heif_color_conversion_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        heif_h.C_CHAR.withName("version"),
        MemoryLayout.paddingLayout(3),
        heif_h.C_INT.withName("preferred_chroma_downsampling_algorithm"),
        heif_h.C_INT.withName("preferred_chroma_upsampling_algorithm"),
        heif_h.C_CHAR.withName("only_use_preferred_chroma_algorithm"),
        MemoryLayout.paddingLayout(3)
    ).withName("heif_color_conversion_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte version$LAYOUT = (OfByte)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final OfByte version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static byte version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t version
     * }
     */
    public static void version(MemorySegment struct, byte fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    private static final OfInt preferred_chroma_downsampling_algorithm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferred_chroma_downsampling_algorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm
     * }
     */
    public static final OfInt preferred_chroma_downsampling_algorithm$layout() {
        return preferred_chroma_downsampling_algorithm$LAYOUT;
    }

    private static final long preferred_chroma_downsampling_algorithm$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm
     * }
     */
    public static final long preferred_chroma_downsampling_algorithm$offset() {
        return preferred_chroma_downsampling_algorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm
     * }
     */
    public static int preferred_chroma_downsampling_algorithm(MemorySegment struct) {
        return struct.get(preferred_chroma_downsampling_algorithm$LAYOUT, preferred_chroma_downsampling_algorithm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_chroma_downsampling_algorithm preferred_chroma_downsampling_algorithm
     * }
     */
    public static void preferred_chroma_downsampling_algorithm(MemorySegment struct, int fieldValue) {
        struct.set(preferred_chroma_downsampling_algorithm$LAYOUT, preferred_chroma_downsampling_algorithm$OFFSET, fieldValue);
    }

    private static final OfInt preferred_chroma_upsampling_algorithm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferred_chroma_upsampling_algorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm
     * }
     */
    public static final OfInt preferred_chroma_upsampling_algorithm$layout() {
        return preferred_chroma_upsampling_algorithm$LAYOUT;
    }

    private static final long preferred_chroma_upsampling_algorithm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm
     * }
     */
    public static final long preferred_chroma_upsampling_algorithm$offset() {
        return preferred_chroma_upsampling_algorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm
     * }
     */
    public static int preferred_chroma_upsampling_algorithm(MemorySegment struct) {
        return struct.get(preferred_chroma_upsampling_algorithm$LAYOUT, preferred_chroma_upsampling_algorithm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum heif_chroma_upsampling_algorithm preferred_chroma_upsampling_algorithm
     * }
     */
    public static void preferred_chroma_upsampling_algorithm(MemorySegment struct, int fieldValue) {
        struct.set(preferred_chroma_upsampling_algorithm$LAYOUT, preferred_chroma_upsampling_algorithm$OFFSET, fieldValue);
    }

    private static final OfByte only_use_preferred_chroma_algorithm$LAYOUT = (OfByte)$LAYOUT.select(groupElement("only_use_preferred_chroma_algorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t only_use_preferred_chroma_algorithm
     * }
     */
    public static final OfByte only_use_preferred_chroma_algorithm$layout() {
        return only_use_preferred_chroma_algorithm$LAYOUT;
    }

    private static final long only_use_preferred_chroma_algorithm$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t only_use_preferred_chroma_algorithm
     * }
     */
    public static final long only_use_preferred_chroma_algorithm$offset() {
        return only_use_preferred_chroma_algorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t only_use_preferred_chroma_algorithm
     * }
     */
    public static byte only_use_preferred_chroma_algorithm(MemorySegment struct) {
        return struct.get(only_use_preferred_chroma_algorithm$LAYOUT, only_use_preferred_chroma_algorithm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t only_use_preferred_chroma_algorithm
     * }
     */
    public static void only_use_preferred_chroma_algorithm(MemorySegment struct, byte fieldValue) {
        struct.set(only_use_preferred_chroma_algorithm$LAYOUT, only_use_preferred_chroma_algorithm$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

